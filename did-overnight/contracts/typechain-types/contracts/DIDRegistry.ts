/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DIDRegistry {
  export type CredentialStruct = {
    vcHash: BytesLike;
    timestamp: BigNumberish;
    isValid: boolean;
  };

  export type CredentialStructOutput = [
    vcHash: string,
    timestamp: bigint,
    isValid: boolean
  ] & { vcHash: string; timestamp: bigint; isValid: boolean };
}

export interface DIDRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "anonAadhaar"
      | "didToCredential"
      | "getCredential"
      | "registerDID"
      | "revoke"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CredentialRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "anonAadhaar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didToCredential",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredential",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDID",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "anonAadhaar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "didToCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
}

export namespace CredentialRegisteredEvent {
  export type InputTuple = [
    did: string,
    vcHash: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [did: string, vcHash: string, timestamp: bigint];
  export interface OutputObject {
    did: string;
    vcHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DIDRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DIDRegistry;
  waitForDeployment(): Promise<this>;

  interface: DIDRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  anonAadhaar: TypedContractMethod<[], [string], "view">;

  didToCredential: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, boolean] & {
        vcHash: string;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getCredential: TypedContractMethod<
    [did: string],
    [DIDRegistry.CredentialStructOutput],
    "view"
  >;

  registerDID: TypedContractMethod<
    [
      did: string,
      vcHash: BytesLike,
      nullifierSeed: BigNumberish,
      nullifier: BigNumberish,
      timestamp: BigNumberish,
      signal: BigNumberish,
      revealArray: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      groth16Proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  revoke: TypedContractMethod<[did: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "anonAadhaar"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "didToCredential"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, boolean] & {
        vcHash: string;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCredential"
  ): TypedContractMethod<
    [did: string],
    [DIDRegistry.CredentialStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDID"
  ): TypedContractMethod<
    [
      did: string,
      vcHash: BytesLike,
      nullifierSeed: BigNumberish,
      nullifier: BigNumberish,
      timestamp: BigNumberish,
      signal: BigNumberish,
      revealArray: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      groth16Proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[did: string], [void], "nonpayable">;

  getEvent(
    key: "CredentialRegistered"
  ): TypedContractEvent<
    CredentialRegisteredEvent.InputTuple,
    CredentialRegisteredEvent.OutputTuple,
    CredentialRegisteredEvent.OutputObject
  >;

  filters: {
    "CredentialRegistered(string,bytes32,uint256)": TypedContractEvent<
      CredentialRegisteredEvent.InputTuple,
      CredentialRegisteredEvent.OutputTuple,
      CredentialRegisteredEvent.OutputObject
    >;
    CredentialRegistered: TypedContractEvent<
      CredentialRegisteredEvent.InputTuple,
      CredentialRegisteredEvent.OutputTuple,
      CredentialRegisteredEvent.OutputObject
    >;
  };
}
